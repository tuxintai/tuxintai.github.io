<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数列排序</title>
    <link href="/2024/04/06/%E6%95%B0%E5%88%97%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/04/06/%E6%95%B0%E5%88%97%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//打印函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> *data, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++ )<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//分割函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">split</span><span class="hljs-params">(<span class="hljs-type">int</span> *data, <span class="hljs-type">int</span> pre, <span class="hljs-type">int</span> rear)</span><br>&#123;<br>    <span class="hljs-type">int</span> value = data[pre];<span class="hljs-comment">//用第一个数为基准值</span><br>    <span class="hljs-keyword">while</span>(pre &lt; rear)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (data[rear] &gt;= value &amp;&amp; pre &lt; rear)<br>        &#123;<br>            rear--;<br>        &#125;<br>        data[pre] = data[rear];<br>        <span class="hljs-keyword">while</span> (data[pre] &lt; value &amp;&amp; pre &lt; rear)<br>        &#123;<br>            pre++;<br>        &#125;<br>        data[rear] = data[pre];<br>    &#125;<br><br>    data[pre] = value;<br>    <span class="hljs-keyword">return</span> pre;<span class="hljs-comment">//返回基准值，为了方便后序递归调用快速排序时确认下次切割的起始位置</span><br>&#125;<br><br><span class="hljs-comment">//快速排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> *data, <span class="hljs-type">int</span> pre, <span class="hljs-type">int</span> rear)</span><br>&#123;<br>   <br>    <span class="hljs-keyword">if</span> (pre &lt; rear)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = split(data, pre, rear);<br>        quick_sort(data, pre, mid - <span class="hljs-number">1</span>);<br>        quick_sort(data, mid + <span class="hljs-number">1</span>, rear);<br><br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> *data;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    data = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*n);<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;data[i]);<br>    &#125;<br>    quick_sort(data, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    print(data, n);<br>    <span class="hljs-built_in">free</span>(data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA算法实现</title>
    <link href="/2024/04/01/RSA%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/04/01/RSA%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 信安</span><br><span class="hljs-comment"># 土辛台</span><br><span class="hljs-comment"># 开发时间  23:01</span><br><span class="hljs-comment">#实现RSA算法分7步</span><br><span class="hljs-comment">#1. 选择一对不相等的素数p,q: 用到素数检验（费马小定理）</span><br><span class="hljs-comment">#2，令n = p * q</span><br><span class="hljs-comment">#3. 计算n的欧拉函数phi_n = (p - 1) * (q - 1)</span><br><span class="hljs-comment">#4，选一个和n互素的整数 e = 3</span><br><span class="hljs-comment">#5. 计算e模phi_n的逆元d: 用到扩展欧几里得算法</span><br><span class="hljs-comment">#6. 公钥KU = (e, n)</span><br><span class="hljs-comment">#7. 私钥KR = (d, p, q)</span><br><span class="hljs-comment">#明文M --&gt;加密： M^e mod n = C： 模乘</span><br><span class="hljs-comment">#密文C --&gt;解密： C^d mod n = M： 模乘</span><br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span>  random<br><span class="hljs-comment">#模乘</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">power</span>(<span class="hljs-params">base, exponent, modulus</span>):<br>    result = <span class="hljs-number">1</span><br>    base = base % modulus<span class="hljs-comment">#对底数取模，防止溢出</span><br><br>    <span class="hljs-keyword">while</span> exponent &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> exponent % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            result = (result * base) % modulus<br>        exponent = exponent // <span class="hljs-number">2</span><br>        base = (base * base) % modulus<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment">#a = power(4, 2, 5)</span><br><span class="hljs-comment">#print(a)</span><br><br><span class="hljs-comment">#费马测试</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fermat_test</span>(<span class="hljs-params">a, N</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    费马小定理：</span><br><span class="hljs-string">        如果N是素数，则a^(N-1) - 1 能被 N 整除</span><br><span class="hljs-string">        a^(N-1) mod N = 1;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> N == <span class="hljs-number">2</span>:<span class="hljs-comment">#2是素数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> N % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<span class="hljs-comment">#能被2整除的不是素数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> power(a, N - <span class="hljs-number">1</span>, N) == <span class="hljs-number">1</span><br><br><span class="hljs-comment">#b = fermat_test(7, 13)</span><br><span class="hljs-comment">#print(b)</span><br><br><span class="hljs-comment">#素性测试</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">N, rounds = <span class="hljs-number">5</span></span>):<br>    <span class="hljs-keyword">if</span> N &lt;= <span class="hljs-number">1</span>:<span class="hljs-comment">#小于等于1的不是素数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> N &lt;= <span class="hljs-number">3</span>:<span class="hljs-comment">#2，3是素数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rounds):<br>        <span class="hljs-comment">#随机生成2到N-1的数去测试</span><br>        a = random.randint(<span class="hljs-number">2</span>, N - <span class="hljs-number">1</span>)<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        random.randint(a,b)是python标准库中&#x27;random&#x27;模块提供的函数</span><br><span class="hljs-string">        用于随机生成(a,b)之间的整数</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> fermat_test(a, N):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-comment">#a = is_prime(139)</span><br><span class="hljs-comment">#print(a)</span><br><br><span class="hljs-comment">#随机生成素数p</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_prime</span>(<span class="hljs-params">low, high</span>):<br>    p = random.randint(low, high)<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> is_prime(p):<br>        p = random.randint(low, high)<br>    <span class="hljs-keyword">return</span> p<br><br><span class="hljs-comment">#欧几里得返回向量（d, x, y)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ext_gcd</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    利用递归实现欧几里得算法：</span><br><span class="hljs-string">        a &gt; b: a = b*q + r, 如果 r=0 ,b就是最大公约数d,否则将b赋值给a，r赋值给b，返回上一步。———&gt;算出最大公约数d</span><br><span class="hljs-string">    用扩展欧几里得算法算出系数x,y:</span><br><span class="hljs-string">        a&gt;b: b=0时，d=a, x=1, y=0</span><br><span class="hljs-string">        a = (a/b)*b + a%b:</span><br><span class="hljs-string">        gcd(a,b) = x*a + y*b  -&gt;1</span><br><span class="hljs-string">        gcd(b,a%b) = x&#x27;*b + y&#x27;*(a%b) -&gt;2</span><br><span class="hljs-string">        结合1,2--&gt; x*a + y*b = x&#x27;*b + y&#x27;* a%b 又a%b= a-(a/b)*b</span><br><span class="hljs-string">        --&gt;x*a + y*b = x&#x27;*b + y&#x27;*[a-(a/b)*b] = y&#x27;*a + x&#x27;-y&#x27;(a/b)*b</span><br><span class="hljs-string">        --&gt; x = y&#x27;, y = x&#x27;-y&#x27;(a/b)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> a, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        d, x, y = ext_gcd(b, a % b)<br>        <span class="hljs-keyword">return</span> d, y, x - (a // b)*y<br><br><span class="hljs-comment">#计算模逆</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv_mod</span>(<span class="hljs-params">a, m</span>):<br>    d, x, y = ext_gcd(a, m)<br>    <span class="hljs-keyword">if</span> d != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Inverse does not exist&quot;</span>)<span class="hljs-comment">#抛出异常</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (x % m + m) % m<span class="hljs-comment">#确保模逆在[0,b)</span><br><br><br><span class="hljs-comment">#生成密钥</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_keygen</span>(<span class="hljs-params">k</span>):<br>    <span class="hljs-comment">#随机生成位于(2^(k-1), 2^k) 的数p,q</span><br>    p = random_prime(<span class="hljs-number">2</span>**(k-<span class="hljs-number">1</span>), <span class="hljs-number">2</span>**k)<br>    q = random_prime(<span class="hljs-number">2</span>**(k-<span class="hljs-number">1</span>), <span class="hljs-number">2</span>**k)<br><br>    <span class="hljs-comment">#避免p = q</span><br>    <span class="hljs-keyword">while</span> p == q:<br>        q = random_prime(<span class="hljs-number">2</span>**(k - <span class="hljs-number">1</span>), <span class="hljs-number">2</span>**k)<br>    <span class="hljs-comment">#大整数N：</span><br>    N = p*q<br>    <span class="hljs-comment">#求欧拉函数：</span><br>    phi_N = (p -<span class="hljs-number">1</span>) * (q -<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#定义e = 3</span><br>    e = <span class="hljs-number">3</span><br><br>    <span class="hljs-comment">#确保模逆的存在</span><br>    <span class="hljs-keyword">try</span>:<br>        d = inv_mod(e, phi_N)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> rsa_keygen(k)<br><br>    <span class="hljs-comment">#生成公钥私钥：</span><br>    pubkey = (e, N)<br>    prikey = (d, p, q)<br><br>    <span class="hljs-keyword">return</span> ( pubkey, prikey)<br><br><span class="hljs-comment">#加密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">m_text, pubkey</span>):<br><br>    e = pubkey[<span class="hljs-number">0</span>]<br>    N = pubkey[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(m_text, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-comment">#ord 接受一个字符作为参数，返回一个ASCII码</span><br>        Unicode_m_text = [<span class="hljs-built_in">ord</span>(char) <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> m_text]<br>        ciphertext = [power(char, e, N) <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> Unicode_m_text]<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(m_text, <span class="hljs-built_in">int</span>):<br>        ciphertext = power(m_text, e, N)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encryption of non-str, int data types is not currently supported.&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">return</span> ciphertext<br><br><span class="hljs-comment">#解密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">e_text, prikey</span>):<br><br>    d, p, q = prikey<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(e_text, <span class="hljs-built_in">list</span>):<br>        decrypted_str = [power(char, d, p * q) <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> e_text]<br>        <span class="hljs-comment">#chr接受一个ASCII码作为参数，返回对应的字符</span><br>        decrypt = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(code) <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> decrypted_str])<br>    <span class="hljs-keyword">else</span>:<br>        decrypt = power(e_text, d, p * q)<br><br>    <span class="hljs-keyword">return</span> decrypt<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    pubkey, prikey = rsa_keygen(<span class="hljs-number">128</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;公钥：&quot;</span>, pubkey)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;私钥：&quot;</span>, prikey)<br><br>    <span class="hljs-comment"># 对314加密和解密</span><br>    message = <span class="hljs-number">314</span><br>    encrypted = enc(message, pubkey)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;314加密后的信息为：&quot;</span>, encrypted)<br>    decrypted = dec(encrypted, prikey)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的信息是：&quot;</span>, decrypted)<br><br>    message = <span class="hljs-string">&quot;芙蓉王源&quot;</span><br>    encrypted = enc(message, pubkey)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;芙蓉王源加密后的信息为：&quot;</span>, encrypted)<br>    decrypted = dec(encrypted, prikey)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的信息是：&quot;</span>, decrypted)<br><br><br><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法概论作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络的概念</title>
    <link href="/2024/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h1><p>​<em><strong>计算机网络是一个将众多分散的，自治的的计算机系统，通过通讯设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统</strong></em></p><img src="https://raw.githubusercontent.com/tuxintai/tuxintai-PicGoImgs/main/D%3A%5CPicGo%5Cimge/202403311434438.png" style="zoom:20%;" /><h2 id="计算机网络-由若干个节点和连接这些节点的链路组成"><a href="#计算机网络-由若干个节点和连接这些节点的链路组成" class="headerlink" title="计算机网络:由若干个节点和连接这些节点的链路组成"></a>计算机网络:由若干个节点和连接这些节点的链路组成</h2><h2 id="1-组成："><a href="#1-组成：" class="headerlink" title="1.组成："></a>1.组成：</h2><h3 id="1-1-从组成部分来看："><a href="#1-1-从组成部分来看：" class="headerlink" title="1.1 从组成部分来看："></a>1.1 从组成部分来看：</h3><h5 id="1-硬件："><a href="#1-硬件：" class="headerlink" title="1 硬件："></a>1 硬件：</h5><h6 id="1-主机：端系统如电脑，手机，物联网设备…"><a href="#1-主机：端系统如电脑，手机，物联网设备…" class="headerlink" title="1 主机：端系统如电脑，手机，物联网设备…"></a>1 主机：端系统如电脑，手机，物联网设备…</h6><h6 id="2-通讯设备：集线器，交换机，路由器…"><a href="#2-通讯设备：集线器，交换机，路由器…" class="headerlink" title="2 通讯设备：集线器，交换机，路由器…"></a>2 通讯设备：集线器，交换机，路由器…</h6><p>​1.集线器和交换机，集线器可以连接多个设备构成一个计算机网络，但是不能避免信息传递的冲突，交换机可以，用于连接同一网络内不同节点。</p><p>​2.路由器是用来连接不同的网络。（家用路由器&#x3D;路由器+交换机+其他功能）</p><h6 id="3-通讯链路：网线，光纤，同轴电缆-…"><a href="#3-通讯链路：网线，光纤，同轴电缆-…" class="headerlink" title="3 通讯链路：网线，光纤，同轴电缆 …"></a>3 通讯链路：网线，光纤，同轴电缆 …</h6><h5 id="2-软件：Email客户端，聊天软件，网盘软件等方便用户使用，实现资源共享"><a href="#2-软件：Email客户端，聊天软件，网盘软件等方便用户使用，实现资源共享" class="headerlink" title="2 软件：Email客户端，聊天软件，网盘软件等方便用户使用，实现资源共享"></a>2 软件：Email客户端，聊天软件，网盘软件等方便用户使用，实现资源共享</h5><h5 id="3-协议：规定计算机网络中的通信规则，有软件和硬件共同实现，如：网络适配器-软件-实现网络通信协议"><a href="#3-协议：规定计算机网络中的通信规则，有软件和硬件共同实现，如：网络适配器-软件-实现网络通信协议" class="headerlink" title="3 协议：规定计算机网络中的通信规则，有软件和硬件共同实现，如：网络适配器+软件 实现网络通信协议"></a>3 协议：规定计算机网络中的通信规则，有软件和硬件共同实现，如：网络适配器+软件 实现网络通信协议</h5><h6 id="1-网络适配器（网卡）：通常集成在计算机主板上，是固件加软件，作用：将主机数据发到网络上接受来自网络的数据"><a href="#1-网络适配器（网卡）：通常集成在计算机主板上，是固件加软件，作用：将主机数据发到网络上接受来自网络的数据" class="headerlink" title="1.网络适配器（网卡）：通常集成在计算机主板上，是固件加软件，作用：将主机数据发到网络上接受来自网络的数据"></a>1.网络适配器（网卡）：通常集成在计算机主板上，是固件加软件，作用：将主机数据发到网络上接受来自网络的数据</h6><h3 id="1-2-从工作方式来看："><a href="#1-2-从工作方式来看：" class="headerlink" title="1.2 从工作方式来看："></a>1.2 从工作方式来看：</h3><img src="https://raw.githubusercontent.com/tuxintai/tuxintai-PicGoImgs/main/D%3A%5CPicGo%5Cimge/202403311434899.png" style="zoom:10%;" /><h4 id="1-边缘部分："><a href="#1-边缘部分：" class="headerlink" title="1 边缘部分："></a>1 边缘部分：</h4><h6 id="1-1-工作方式：直接为用户服务（通信，资源共享）"><a href="#1-1-工作方式：直接为用户服务（通信，资源共享）" class="headerlink" title="1.1 工作方式：直接为用户服务（通信，资源共享）"></a>1.1 工作方式：直接为用户服务（通信，资源共享）</h6><h6 id="1-2-组成：主要由连接到互联网上的主机及其软件组成"><a href="#1-2-组成：主要由连接到互联网上的主机及其软件组成" class="headerlink" title="1.2 组成：主要由连接到互联网上的主机及其软件组成"></a>1.2 组成：主要由连接到互联网上的主机及其软件组成</h6><h4 id="2-核心部分："><a href="#2-核心部分：" class="headerlink" title="2 核心部分："></a>2 核心部分：</h4><h6 id="1-1-工作方式：为边缘部分提供服务（连通性，交换服务）"><a href="#1-1-工作方式：为边缘部分提供服务（连通性，交换服务）" class="headerlink" title="1.1 工作方式：为边缘部分提供服务（连通性，交换服务）"></a>1.1 工作方式：为边缘部分提供服务（连通性，交换服务）</h6><h6 id="交换服务：动态分配数据包传输路线"><a href="#交换服务：动态分配数据包传输路线" class="headerlink" title="交换服务：动态分配数据包传输路线"></a>交换服务：动态分配数据包传输路线</h6><h6 id="1-2-组成：-由大量网络和连接这些网络的路由器组成"><a href="#1-2-组成：-由大量网络和连接这些网络的路由器组成" class="headerlink" title="1.2 组成： 由大量网络和连接这些网络的路由器组成"></a>1.2 组成： 由大量网络和连接这些网络的路由器组成</h6><h3 id="1-3-从逻辑功能来看："><a href="#1-3-从逻辑功能来看：" class="headerlink" title="1.3 从逻辑功能来看："></a>1.3 从逻辑功能来看：</h3><h4 id="1-资源子网："><a href="#1-资源子网：" class="headerlink" title="1 资源子网："></a>1 资源子网：</h4><h6 id="1-1-计算机网络中运行应用程序，向用户提供可共享的硬件，软件和信息资源的部分"><a href="#1-1-计算机网络中运行应用程序，向用户提供可共享的硬件，软件和信息资源的部分" class="headerlink" title="1.1 计算机网络中运行应用程序，向用户提供可共享的硬件，软件和信息资源的部分"></a>1.1 计算机网络中运行应用程序，向用户提供可共享的硬件，软件和信息资源的部分</h6><h6 id="1-2-主要由连接到互联网上的主机组成"><a href="#1-2-主要由连接到互联网上的主机组成" class="headerlink" title="1.2 主要由连接到互联网上的主机组成"></a>1.2 主要由连接到互联网上的主机组成</h6><h4 id="2-通信子网："><a href="#2-通信子网：" class="headerlink" title="2 通信子网："></a>2 通信子网：</h4><h5 id="1-1-计算机网络中负责计算机间信息传输的部分，把计算机和其他用户装置互联在一起的所有通信设备和介质的总称"><a href="#1-1-计算机网络中负责计算机间信息传输的部分，把计算机和其他用户装置互联在一起的所有通信设备和介质的总称" class="headerlink" title="1.1 计算机网络中负责计算机间信息传输的部分，把计算机和其他用户装置互联在一起的所有通信设备和介质的总称"></a>1.1 计算机网络中负责计算机间信息传输的部分，把计算机和其他用户装置互联在一起的所有通信设备和介质的总称</h5><h5 id="1-2-主要由-通信链路-通信设备-协议-构成"><a href="#1-2-主要由-通信链路-通信设备-协议-构成" class="headerlink" title="1.2 主要由 通信链路+通信设备+协议 构成"></a>1.2 主要由 通信链路+通信设备+协议 构成</h5><p>​<em>主机内部实现信息传输的网络适配器，底层协议属于通信子网的范畴</em></p><h2 id="2-功能："><a href="#2-功能：" class="headerlink" title="2.功能："></a>2.功能：</h2><h3 id="2-1-数据通信：实现计算机之间数据传输，是最基本，最重要的功能"><a href="#2-1-数据通信：实现计算机之间数据传输，是最基本，最重要的功能" class="headerlink" title="2.1 数据通信：实现计算机之间数据传输，是最基本，最重要的功能"></a>2.1 数据通信：实现计算机之间数据传输，是最基本，最重要的功能</h3><h3 id="2-2-资源共享："><a href="#2-2-资源共享：" class="headerlink" title="2.2 资源共享："></a>2.2 资源共享：</h3><h5 id="1-硬件：智能音箱请求服务器处理"><a href="#1-硬件：智能音箱请求服务器处理" class="headerlink" title="1.硬件：智能音箱请求服务器处理"></a>1.硬件：智能音箱请求服务器处理</h5><h5 id="2-软件：应用商店"><a href="#2-软件：应用商店" class="headerlink" title="2.软件：应用商店"></a>2.软件：应用商店</h5><h5 id="3-数据资源：分享视频"><a href="#3-数据资源：分享视频" class="headerlink" title="3.数据资源：分享视频"></a>3.数据资源：分享视频</h5><h3 id="2-3-分布式处理：将某个复杂任务分配给网络中多台计算机处理-如：大矩阵运算"><a href="#2-3-分布式处理：将某个复杂任务分配给网络中多台计算机处理-如：大矩阵运算" class="headerlink" title="2.3 分布式处理：将某个复杂任务分配给网络中多台计算机处理,如：大矩阵运算"></a>2.3 分布式处理：将某个复杂任务分配给网络中多台计算机处理,如：大矩阵运算</h3><h3 id="2-4-提高可靠性：网络中各台计算机互为替代机，如：网盘服务器集群网络，数据冗余备份"><a href="#2-4-提高可靠性：网络中各台计算机互为替代机，如：网盘服务器集群网络，数据冗余备份" class="headerlink" title="2.4 提高可靠性：网络中各台计算机互为替代机，如：网盘服务器集群网络，数据冗余备份"></a>2.4 提高可靠性：网络中各台计算机互为替代机，如：网盘服务器集群网络，数据冗余备份</h3><h3 id="2-5-负载均衡：网络中各台计算机共同分担繁重工作，如：游戏多台服务器均衡处理玩家请求"><a href="#2-5-负载均衡：网络中各台计算机共同分担繁重工作，如：游戏多台服务器均衡处理玩家请求" class="headerlink" title="2.5 负载均衡：网络中各台计算机共同分担繁重工作，如：游戏多台服务器均衡处理玩家请求"></a>2.5 负载均衡：网络中各台计算机共同分担繁重工作，如：游戏多台服务器均衡处理玩家请求</h3><h3 id="2-6-其他：满足社会需求，生活需求，如：远程办公，远程教育，娱乐……"><a href="#2-6-其他：满足社会需求，生活需求，如：远程办公，远程教育，娱乐……" class="headerlink" title="2.6 其他：满足社会需求，生活需求，如：远程办公，远程教育，娱乐……"></a>2.6 其他：满足社会需求，生活需求，如：远程办公，远程教育，娱乐……</h3>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>四大件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序列求和</title>
    <link href="/2024/03/25/%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/"/>
    <url>/2024/03/25/%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.问题：求1+2+……+n的值</span><br><span class="hljs-comment">2.数据规模：</span><br><span class="hljs-comment">    1 &lt;= n &lt;= 1000000000</span><br><span class="hljs-comment">3.注意：答案可能不在int的范围内，使用%I64d来输出long long 类型整数</span><br><span class="hljs-comment">4.求和公式：</span><br><span class="hljs-comment">    Sn = n(n+1) / 2</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-comment">//ret 可存储结果，tmp为临时变量</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ret = <span class="hljs-number">0</span>, tmp;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    tmp = n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%I64d\n&quot;</span>, (<span class="hljs-number">1</span>+tmp) * tmp / <span class="hljs-number">2</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：答案可能不在int的范围内，使用%I64d来输出long long 类型整数</p>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>圆的面积</title>
    <link href="/2024/03/25/%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/"/>
    <url>/2024/03/25/%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.问题描述：给定半径r,求圆的面积</span><br><span class="hljs-comment">2.输入整数r</span><br><span class="hljs-comment">3.输出：输出一个实数，保留小数点后7位</span><br><span class="hljs-comment">4.样式：</span><br><span class="hljs-comment">    输入：4</span><br><span class="hljs-comment">    输出：50.2654825</span><br><span class="hljs-comment">5.数据规模：1 &lt;= r &lt;= 10000</span><br><span class="hljs-comment">6.使用数学公式求Π： PI = atan(1.0)*4 </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-type">double</span> s, PI;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r);<br>    PI = <span class="hljs-built_in">atan</span>(<span class="hljs-number">1.0</span>)*<span class="hljs-number">4</span>;<br>    s = PI * r * r;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.7lf\n&quot;</span>, s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：注意保留小数点的打印格式，利用数学公式Π：PI&#x3D;atan(1.0)*4</p>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fibonacci</title>
    <link href="/2024/03/25/Fibonacci/"/>
    <url>/2024/03/25/Fibonacci/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.Fibonacci数列：</span><br><span class="hljs-comment">    F(n) = F(n-1) + F(n-2)</span><br><span class="hljs-comment">    F(1) = 1, F(2) = 1</span><br><span class="hljs-comment">2.题目：</span><br><span class="hljs-comment">    求F(n) / 10007 的余数</span><br><span class="hljs-comment">3.数据规模与约定:</span><br><span class="hljs-comment">    1 &lt;= n &lt;= 1,000,000</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mod 10007</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max_num 1000001</span><br><span class="hljs-type">int</span> n, i, F[max_num];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>     F[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>     F[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">3</span>; i &lt;= n; ++i)<br>     &#123;<br>        F[i] = (F[i<span class="hljs-number">-1</span>] + F[i<span class="hljs-number">-2</span>]) % mod;<br>     &#125;<br><br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, F[n]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：因为题目要求F(n)%10007,不需要求F(n),所以直接求余数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">F[i] = (F[i<span class="hljs-number">-1</span>] + F[i<span class="hljs-number">-2</span>]) % mod；<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分法</title>
    <link href="/2024/03/25/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <url>/2024/03/25/%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> num_size, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = num_size - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)&#123;<br>        <span class="hljs-type">int</span> middle = left + (right - left)/<span class="hljs-number">2</span> ;<br>        <span class="hljs-keyword">if</span> (target == nums[middle])&#123;<br>             <span class="hljs-keyword">return</span> middle;;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &gt; nums[middle])&#123;<br>            left = middle + <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            right = middle - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>1.边界的判断:[left, right]:</p><p>​&#x2F;&#x2F;不用再判断middle</p><p>​right &#x3D; middle - 1 ;  left &#x3D; middle + 1 </p><p>2.返回的是数组 nums[] 的索引，和target比较的是数组里面的值也就是nums[middle]</p><ol start="3"><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> middle = left + (right - left)/<span class="hljs-number">2</span> <span class="hljs-comment">//防止溢出</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>num_to_roman</title>
    <link href="/2024/03/18/num-to-roman/"/>
    <url>/2024/03/18/num-to-roman/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* 罗马数字规则：</span><br><span class="hljs-comment">I（1），V（5)，x(10), L(50), C(100), D(500), M(1000)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">num_to_roman</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> a = num / <span class="hljs-number">1000</span>；<br>    <span class="hljs-type">int</span> b = num % <span class="hljs-number">1000</span> / <span class="hljs-number">100</span>;<br>    <span class="hljs-type">int</span> c = num % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> d = num %;<br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> s[<span class="hljs-number">20</span>];<span class="hljs-comment">//静态数组，存结果</span><br>    s[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//确保数组为空</span><br>    <br>    <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span> &amp;&amp; num &lt; <span class="hljs-number">4000</span>) &#123;<br>        <span class="hljs-comment">// 千位</span><br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;M&quot;</span>);<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">2</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;MM&quot;</span>);<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">3</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;MMM&quot;</span>);<br>        <span class="hljs-comment">// 百位</span><br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">2</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;CC&quot;</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">3</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;CCC&quot;</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">4</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;CD&quot;</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">5</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;D&quot;</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">6</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;DC&quot;</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">7</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;DCC&quot;</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">8</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;DCCC&quot;</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">9</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;CM&quot;</span>);<br>        <span class="hljs-comment">// 十位</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">1</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;X&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">2</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;XX&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">3</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;XXX&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">4</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;XL&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">5</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;L&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">6</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;LX&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">7</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;LXX&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">8</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;LXXX&quot;</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">9</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;XC&quot;</span>);<br>        <span class="hljs-comment">// 个位</span><br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">1</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;I&quot;</span>);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">2</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;II&quot;</span>);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">3</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;III&quot;</span>);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">4</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;IV&quot;</span>);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">5</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;V&quot;</span>);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">6</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;VI&quot;</span>);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">7</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;VII&quot;</span>);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">8</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;VIII&quot;</span>);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">9</span>) <span class="hljs-built_in">strcat</span>(s, <span class="hljs-string">&quot;IX&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter an integer ranging from 0 to 4000\n&quot;</span>);<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, NumTORoman(num));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
