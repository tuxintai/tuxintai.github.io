<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hi~</title>
    <url>/2024/04/15/hi/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/tuxintai/tuxintai-PicGoImgs/main/D%3A%5CPicGo%5Cimge/202404152205958.jpg" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>数列排序</title>
    <url>/2024/04/06/%E6%95%B0%E5%88%97%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> *data, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分割函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">split</span><span class="params">(<span class="type">int</span> *data, <span class="type">int</span> pre, <span class="type">int</span> rear)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value = data[pre];<span class="comment">//用第一个数为基准值</span></span><br><span class="line">    <span class="keyword">while</span>(pre &lt; rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (data[rear] &gt;= value &amp;&amp; pre &lt; rear)</span><br><span class="line">        &#123;</span><br><span class="line">            rear--;</span><br><span class="line">        &#125;</span><br><span class="line">        data[pre] = data[rear];</span><br><span class="line">        <span class="keyword">while</span> (data[pre] &lt; value &amp;&amp; pre &lt; rear)</span><br><span class="line">        &#123;</span><br><span class="line">            pre++;</span><br><span class="line">        &#125;</span><br><span class="line">        data[rear] = data[pre];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data[pre] = value;</span><br><span class="line">    <span class="keyword">return</span> pre;<span class="comment">//返回基准值，为了方便后序递归调用快速排序时确认下次切割的起始位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> *data, <span class="type">int</span> pre, <span class="type">int</span> rear)</span></span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (pre &lt; rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = split(data, pre, rear);</span><br><span class="line">        quick_sort(data, pre, mid - <span class="number">1</span>);</span><br><span class="line">        quick_sort(data, mid + <span class="number">1</span>, rear);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*n);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(data, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    print(data, n);</span><br><span class="line">    <span class="built_in">free</span>(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>实验报告提交系统</title>
    <url>/2024/04/21/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%8F%90%E4%BA%A4%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h3><p>​    构建实验报告上传系统的E-R图，并将E-R图转换为关系模式，标出每个关系模式的主键和外键（如果有），写出创建数据库及表的SQL语句。</p>
<h4 id="实验报告上传系统基本需求："><a href="#实验报告上传系统基本需求：" class="headerlink" title="实验报告上传系统基本需求："></a><strong>实验报告上传系统基本需求：</strong></h4><ol>
<li>实验教学中，实验要求是以Word文档的形式分发给学生的。学生按照实验要求完成实验内容，编写并提交PDF版本的实验报告;</li>
<li>每门实验课有多个实验项目（如：Servlet程序设计、JSP程序设计、会话程序设计、JDBC数据库访问等）；</li>
<li>每个实验项目要提交一份实验报告，教师会根据实验进度开放和关闭某个实验报告的上传，实验报告必须是PDF文件，大小不超过8M；</li>
<li>每门实验课单独一个文件夹；同一个实验项目的实验报告上传到相同的文件夹中，文件夹以项目名称命名；</li>
<li>不论学生上传的文件名是什么，我们希望均以“学号-姓名-实验项目名.pdf”保存上传文件;</li>
<li>“实验报告上传系统”是一个独立的系统，不需要与其他系统对接。教师可以从教学系统下载到实验课学生的花名册，根据花名册中选课学生名单按照Excel表格模板填写“实验课信息”，教师创建课程时通过“实验课信息”Excel表导入实验课的项目和学生信息（项目名称、学生姓姓名和学号）；</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th>ID</th>
<th>SNO</th>
<th>Sname</th>
<th>关系数据库操作实验</th>
<th style="text-align:center">数据库设计实验</th>
<th>MYSQL数据库的操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>2022001</td>
<td>张同学</td>
<td></td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>2022002</td>
<td>李同学</td>
<td></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>用户<br> DBA：系统运维，数据库管理；<br> 教师：建立实验课程，导入实验项目和学生信息；开放、关闭、截止实验项目的上传；下载实验报告；<br> 学生：上传实验报告。</li>
</ol>
<h3 id="实验数据："><a href="#实验数据：" class="headerlink" title="实验数据："></a>实验数据：</h3><ol>
<li><h4 id="E-R图："><a href="#E-R图：" class="headerlink" title="E-R图："></a>E-R图：</h4><p>若实体间联系是 1:1 可以在两个实体类型转化成的两个关系模式中任意一个关系模式中，加入另一个关系模式的键和联系类型的属性。</p>
<p>若实体间联系是 1:n ，则在n端实体类型转化成的关系模式中加入1端实体类型的键和联系类型的属性。</p>
<p>若实体间的联系是 n:m ,则将联系类型也转换成关系模式，其属性为两端实体类型的键加上联系类型的属性，而键为两端实体键的组合。</p>
</li>
<li><p><img src="https://raw.githubusercontent.com/tuxintai/tuxintai-PicGoImgs/main/D%3A%5CPicGo%5Cimge/202404211508073.png" alt=""></p>
</li>
<li><h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database 实验报告提交系统;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 切换到新数据库</span></span><br><span class="line">use 实验报告提交系统;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建老师表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher (</span><br><span class="line">    teacher_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    teacher_name <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">    student_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    student_name <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建课程表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course (</span><br><span class="line">    course_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    course_name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    teacher_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key (teacher_id) <span class="keyword">references</span> teacher(teacher_id)</span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建实验表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> experiment (</span><br><span class="line">    experiment_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    experiment_name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    course_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key (course_id) <span class="keyword">references</span> course(course_id)</span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建项目表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> project (</span><br><span class="line">    project_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    project_name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    project_path <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    experiment_id <span class="type">int</span>,</span><br><span class="line">    open_date <span class="type">date</span>,</span><br><span class="line">    close_date <span class="type">date</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key (experiment_id) <span class="keyword">references</span> experiment(experiment_id)</span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生选课关系表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> select_course (</span><br><span class="line">    student_id <span class="type">int</span>,</span><br><span class="line">    course_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (student_id, course_id),</span><br><span class="line">    <span class="keyword">foreign</span> key (student_id) <span class="keyword">references</span> student(student_id),</span><br><span class="line">    <span class="keyword">foreign</span> key (course_id) <span class="keyword">references</span> course(course_id)</span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建实验要求表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> requirement (</span><br><span class="line">    requirement_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    requirement_name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    requirement_path <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    uploaded_date <span class="type">date</span>,</span><br><span class="line">    project_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key (project_id) <span class="keyword">references</span> project(project_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建报告表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> report (</span><br><span class="line">    report_id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    student_id <span class="type">int</span>,</span><br><span class="line">    project_id <span class="type">int</span>,</span><br><span class="line">    report_path <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    report_size <span class="type">int</span>,</span><br><span class="line">    report_file <span class="type">varbinary</span>(max),</span><br><span class="line">    report_name nvarchar(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">foreign</span> key (student_id) <span class="keyword">references</span> student(student_id),</span><br><span class="line">    <span class="keyword">foreign</span> key (project_id) <span class="keyword">references</span> project(project_id)</span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建存储过程 upload_report</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> upload_report (</span><br><span class="line">    <span class="variable">@student_id</span> <span class="type">int</span>,</span><br><span class="line">    <span class="variable">@project_id</span> <span class="type">int</span>,</span><br><span class="line">    <span class="variable">@report_file</span> <span class="type">varbinary</span>(max)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@report_size</span> <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@report_name</span> nvarchar(<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@open_date</span> <span class="type">date</span>;</span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@close_date</span> <span class="type">date</span>;</span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@project_name</span> nvarchar(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@folder_path</span> nvarchar(<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@file_extension</span> nvarchar(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 获取实验项目名称和开放/关闭日期</span></span><br><span class="line">    <span class="keyword">select</span> <span class="variable">@project_name</span> <span class="operator">=</span> project_name, <span class="variable">@open_date</span> <span class="operator">=</span> open_date, <span class="variable">@close_date</span> <span class="operator">=</span> close_date</span><br><span class="line">    <span class="keyword">from</span> project</span><br><span class="line">    <span class="keyword">where</span> project_id <span class="operator">=</span> <span class="variable">@project_id</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 检查报告上传是否在开放日期和关闭日期之间</span></span><br><span class="line">    if getdate() <span class="keyword">not</span> <span class="keyword">between</span> <span class="variable">@open_date</span> <span class="keyword">and</span> <span class="variable">@close_date</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">-- 抛出错误，报告上传不在允许的时间范围内</span></span><br><span class="line">        throw <span class="number">50000</span>, N<span class="string">&#x27;报告上传不在允许的时间范围内&#x27;</span>, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 检查报告文件大小</span></span><br><span class="line">    <span class="keyword">set</span> <span class="variable">@report_size</span> <span class="operator">=</span> datalength(<span class="variable">@report_file</span>);</span><br><span class="line">    if <span class="variable">@report_size</span> <span class="operator">&gt;</span> (<span class="number">8</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">-- 引发错误消息</span></span><br><span class="line">        throw <span class="number">50000</span>, N<span class="string">&#x27;文件大小超过8MB&#x27;</span>, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">-- 获取上传的文件扩展名</span></span><br><span class="line">    <span class="keyword">set</span> <span class="variable">@file_extension</span> <span class="operator">=</span> <span class="keyword">right</span>(<span class="variable">@report_name</span>, charindex(<span class="string">&#x27;.&#x27;</span>, reverse(<span class="variable">@report_name</span>)) <span class="operator">-</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 检查文件扩展名是否为 PDF</span></span><br><span class="line">    if <span class="variable">@file_extension</span> <span class="operator">&lt;&gt;</span> <span class="string">&#x27;pdf&#x27;</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">-- 抛出错误消息</span></span><br><span class="line">        throw <span class="number">50000</span>, N<span class="string">&#x27;文件格式必须为PDF&#x27;</span>, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 获取项目对应的文件夹路径</span></span><br><span class="line">    <span class="keyword">select</span> <span class="variable">@folder_path</span> <span class="operator">=</span> project_path</span><br><span class="line">    <span class="keyword">from</span> project</span><br><span class="line">    <span class="keyword">where</span> project_id <span class="operator">=</span> <span class="variable">@project_id</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 为报告命名,cast()：将整数类型student_id转为字符串方便连接</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> top <span class="number">1</span></span><br><span class="line">        <span class="variable">@report_name</span> <span class="operator">=</span> <span class="built_in">cast</span>(<span class="variable">@student_id</span> <span class="keyword">as</span> nvarchar) <span class="operator">+</span> <span class="string">&#x27;-&#x27;</span> <span class="operator">+</span> s.student_name <span class="operator">+</span> <span class="string">&#x27;-&#x27;</span> <span class="operator">+</span> <span class="variable">@project_name</span> <span class="operator">+</span> <span class="string">&#x27;.pdf&#x27;</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        student s</span><br><span class="line">        <span class="keyword">join</span> select_course sc <span class="keyword">on</span> s.student_id <span class="operator">=</span> sc.student_id</span><br><span class="line">        <span class="keyword">join</span> course c <span class="keyword">on</span> sc.course_id <span class="operator">=</span> c.course_id</span><br><span class="line">        <span class="keyword">join</span> experiment e <span class="keyword">on</span> c.course_id <span class="operator">=</span> e.course_id</span><br><span class="line">        <span class="keyword">join</span> project p <span class="keyword">on</span> e.experiment_id <span class="operator">=</span> p.experiment_id</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        s.student_id <span class="operator">=</span> <span class="variable">@student_id</span></span><br><span class="line">        <span class="keyword">and</span> p.project_id <span class="operator">=</span> <span class="variable">@project_id</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 在报告表中记录报告信息，包括报告文件</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> report (student_id, project_id, report_name, report_size, report_file)</span><br><span class="line">    <span class="keyword">values</span> (<span class="variable">@student_id</span>, <span class="variable">@project_id</span>, <span class="variable">@report_name</span>, <span class="variable">@report_size</span>, <span class="variable">@report_file</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> import_experiment_info</span><br><span class="line">    <span class="variable">@excel_file_path</span> nvarchar(<span class="number">255</span>) <span class="comment">-- Excel文件路径</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     <span class="comment">-- 使用动态SQL检查临时表是否存在，存在则删除</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="variable">@sql</span> nvarchar(max);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="variable">@sql</span> <span class="operator">=</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">    if object_id(&#x27;&#x27;tempdb..#temp_experiment_info&#x27;&#x27;) is not null</span></span><br><span class="line"><span class="string">    begin</span></span><br><span class="line"><span class="string">        drop table #temp_experiment_info;</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    &#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 创建临时表来存储Excel中的数据</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> #temp_experiment_info (</span><br><span class="line">        project_name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">        student_name nvarchar(<span class="number">100</span>),</span><br><span class="line">        student_id <span class="type">int</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 使用 TRY...CATCH 块处理错误</span></span><br><span class="line">    <span class="keyword">begin</span> try</span><br><span class="line">        <span class="comment">-- 使用 openrowset 和 openrowsetT 函数从 Excel 文件中读取数据到临时表</span></span><br><span class="line">        <span class="keyword">declare</span> <span class="variable">@sql</span> nvarchar(max);</span><br><span class="line">        <span class="keyword">set</span> <span class="variable">@sql</span> <span class="operator">=</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">        insert into #temp_experiment_info (project_name, student_name, student_id)</span></span><br><span class="line"><span class="string">        select [project_name], [student_name], [student_id]</span></span><br><span class="line"><span class="string">        from openrowset(&#x27;&#x27;Microsoft.ACE.OLEDB.12.0&#x27;&#x27;,</span></span><br><span class="line"><span class="string">                        &#x27;&#x27;Data Source=&#x27;&#x27;&#x27;</span> <span class="operator">+</span> <span class="variable">@excel_file_path</span> <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;;Extended Properties=Excel 12.0&#x27;&#x27;)...[Sheet1$];</span></span><br><span class="line"><span class="string">        &#x27;</span>;</span><br><span class="line">        <span class="keyword">exec</span>(<span class="variable">@sql</span>);</span><br><span class="line">    <span class="keyword">end</span> try</span><br><span class="line">    <span class="keyword">begin</span> catch</span><br><span class="line">        <span class="comment">-- 如果出现错误，输出错误信息</span></span><br><span class="line">        <span class="keyword">select</span> error_message() <span class="keyword">as</span> ErrorMessage;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">end</span> catch</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 将临时表中的数据插入到项目表</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> project (project_name, project_path)</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> project_name, <span class="string">&#x27;/experiment_reports/&#x27;</span> <span class="operator">+</span> project_name</span><br><span class="line">    <span class="keyword">from</span> #temp_experiment_info</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> project p <span class="keyword">where</span> p.project_name <span class="operator">=</span> #temp_experiment_info.project_name</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 将临时表中的数据插入到学生表</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> student (student_id, student_name)</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> student_id, student_name</span><br><span class="line">    <span class="keyword">from</span> #temp_experiment_info</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> student s <span class="keyword">where</span> s.student_id <span class="operator">=</span> #temp_experiment_info.student_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 删除临时表</span></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">table</span> #temp_experiment_info;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">go</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据抓取</title>
    <url>/2024/04/14/%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96/</url>
    <content><![CDATA[<p>用phpstudy集成环境安装MySQL：<a href="https://www.itheima.com/news/20191129/171021.html">https://www.itheima.com/news/20191129/171021.html</a></p>
<p>数据库图形操作页面破解版：<a href="https://www.exception.site/article/1596">https://www.exception.site/article/1596</a></p>
<p>​    </p>
]]></content>
      <categories>
        <category>作品赛</category>
      </categories>
  </entry>
  <entry>
    <title>阶乘约数(算术基本定理)</title>
    <url>/2024/04/11/%E9%98%B6%E4%B9%98%E7%BA%A6%E6%95%B0/</url>
    <content><![CDATA[<h2 id="问题：求100！的所有约数"><a href="#问题：求100！的所有约数" class="headerlink" title="问题：求100！的所有约数"></a>问题：求100！的所有约数</h2><h3 id="算术基本定理："><a href="#算术基本定理：" class="headerlink" title="算术基本定理："></a>算术基本定理：</h3><p>​    算术基本定理可表述为：任何一个大于1的自然数n,如果n不为质数，那么n可以唯一分解成有限个质数的乘积</p>
<script type="math/tex; mode=display">
n = p_1^{a_1}p_2^{a_2}p_3^{a_3}……</script><script type="math/tex; mode=display">
则约数的个数为：N = \prod^k_{i=1}(a_i + 1)</script><script type="math/tex; mode=display">
约数和： s = \prod^k_{ai}(1+p_i+p_i^2+p_i^3+……+p_i^{a_i})</script><p>​    例如：整数24 = 2^3 + 3^1,所以24有 <script type="math/tex">N =(3+1)*(1+1) = 8</script>个约数，约数和为<script type="math/tex">s = (1+2^1+2^2+2^3) * (1+3^1) = 60</script></p>
<h4 id="法一：用100以内的质数分解"><a href="#法一：用100以内的质数分解" class="headerlink" title="法一：用100以内的质数分解"></a>法一：用100以内的质数分解</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">100!有多少个约数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">mc += (n /= zs[i]):</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一次循环计算出1~100中有多少个数是包含质因子的</span></span><br><span class="line"><span class="comment">例如：</span></span><br><span class="line"><span class="comment">第一次除以2：50个数包含1个因子2</span></span><br><span class="line"><span class="comment">第二次除以2：25个数包含2个因子2</span></span><br><span class="line"><span class="comment">第三次除以2：12个数包含3个因子2</span></span><br><span class="line"><span class="comment">第四次除以2：6个数包含4个因子2</span></span><br><span class="line"><span class="comment">第五次除以2：3个数包含5个因子2</span></span><br><span class="line"><span class="comment">第六次除以2：1个数包含6个因子2</span></span><br><span class="line"><span class="comment">所以2的幂是50+25+12+6+3+1=97</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算100以内的质数：</span></span><br><span class="line"><span class="comment">    for (int i = 10; i &lt;= 100; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (i % 2 &amp;&amp; i % 3 &amp;&amp; i % 5 &amp;&amp; i % 7)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%d,&quot;, i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> zs[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> gs = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//计算数组的长度: sizeof zs / sizeof *zs</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span> zs / <span class="keyword">sizeof</span> *zs; i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="type">int</span> mc = <span class="number">0</span>, n = <span class="number">100</span>;</span><br><span class="line">         <span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            mc += (n /= zs[i]);</span><br><span class="line">        </span><br><span class="line">         &#125;</span><br><span class="line">        </span><br><span class="line">         gs *= mc + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, gs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="法二：直接利用2-100遍历找到所有质因子"><a href="#法二：直接利用2-100遍历找到所有质因子" class="headerlink" title="法二：直接利用2~100遍历找到所有质因子"></a>法二：直接利用2~100遍历找到所有质因子</h4><p><em>j是合因子时会在它出现的那一次被直接处理成质因子的乘积</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">k!有多少个约数?</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k) != EOF) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> p[k + <span class="number">5</span>];<span class="comment">//存质因数的指数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k + <span class="number">5</span>; i++) &#123;</span><br><span class="line">            p[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="comment">//先将数组初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="type">int</span> n = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">while</span> (n % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    p[j]++;</span><br><span class="line">                    n = n / j;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i]) &#123;</span><br><span class="line">                sum *= (p[i] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>扩散</title>
    <url>/2024/04/08/%E6%89%A9%E6%95%A3/</url>
    <content><![CDATA[<h3 id="解法一：用绝对值直接计算扩散距离"><a href="#解法一：用绝对值直接计算扩散距离" class="headerlink" title="解法一：用绝对值直接计算扩散距离"></a>解法一：用绝对值直接计算扩散距离</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题描述</span></span><br><span class="line"><span class="comment">小蓝在一张 无限大 的特殊画布上作画。</span></span><br><span class="line"><span class="comment">这张画布可以看成一个方格图，每个格子可以用一个二维的整数坐标表示。</span></span><br><span class="line"><span class="comment">小蓝在画布上首先点了一下几个点：</span></span><br><span class="line"><span class="comment">(0, 0),(2020, 11),(11, 14),(2000, 2000)</span></span><br><span class="line"><span class="comment">只有这几个格子上有黑色，其它位置都是白色的，每过一分钟，黑色就会扩散一点。</span></span><br><span class="line"><span class="comment">具体的，如果一个格子里面是黑色，它就会扩散到上、下、左、右四个相邻的格子中，使得这四个格子也变成黑色</span></span><br><span class="line"><span class="comment">（如果原来就是黑色，则还是黑色）。</span></span><br><span class="line"><span class="comment">请问，经过 2020 分钟后，画布上有多少个格子是黑色的。</span></span><br><span class="line"><span class="comment">经过2020分钟后：-2020 &lt;= x &lt;= 2020 + 2020; -2020 &lt;= y &lt;= 2000 + 2020</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZY 2020</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> gs = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="comment">//-2020 &lt;= x &lt;= 2020 + 2020; -2020 &lt;= y &lt;= 2000 + 2020</span></span><br><span class="line">    <span class="keyword">for</span> ( x = <span class="number">-2020</span>; x &lt;= <span class="number">2020</span> + <span class="number">2020</span>; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">for</span> ( y = <span class="number">-2020</span>; y &lt;= <span class="number">2000</span> + <span class="number">2020</span>; y++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*(0, 0),(2020, 11),(11, 14),(2000, 2000)</span></span><br><span class="line"><span class="comment">              distance = |x - x0| + |y - y0|,</span></span><br><span class="line"><span class="comment">              其中，(x0,y0)是初始点的坐标。为了计算曼哈顿距离，</span></span><br><span class="line"><span class="comment">              需要对横坐标差的绝对值和纵坐标差的绝对值进行相加</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            gs += (<span class="built_in">abs</span>(x - <span class="number">0</span>) + <span class="built_in">abs</span>(y - <span class="number">0</span>) &lt;= ZY)</span><br><span class="line">                ||(<span class="built_in">abs</span>(x - <span class="number">2020</span>) + <span class="built_in">abs</span>(y - <span class="number">11</span>) &lt;= ZY)</span><br><span class="line">                ||(<span class="built_in">abs</span>(x - <span class="number">11</span>) + <span class="built_in">abs</span>(y - <span class="number">14</span>) &lt;= ZY)</span><br><span class="line">                ||(<span class="built_in">abs</span>(x - <span class="number">2000</span>) + <span class="built_in">abs</span>(y - <span class="number">2000</span>) &lt;= ZY);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, gs);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解法二：利用广度优先搜索（BFS）"><a href="#解法二：利用广度优先搜索（BFS）" class="headerlink" title="解法二：利用广度优先搜索（BFS）"></a>解法二：利用广度优先搜索（BFS）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题描述</span></span><br><span class="line"><span class="comment">小蓝在一张 无限大 的特殊画布上作画。</span></span><br><span class="line"><span class="comment">这张画布可以看成一个方格图，每个格子可以用一个二维的整数坐标表示。</span></span><br><span class="line"><span class="comment">小蓝在画布上首先点了一下几个点：</span></span><br><span class="line"><span class="comment">(0, 0) (2020, 11) (11, 14) (2000, 2000)</span></span><br><span class="line"><span class="comment">只有这几个格子上有黑色，其它位置都是白色的，每过一分钟，黑色就会扩散一点。</span></span><br><span class="line"><span class="comment">具体的，如果一个格子里面是黑色，它就会扩散到上、下、左、右四个相邻的格子中，使得这四个格子也变成黑色</span></span><br><span class="line"><span class="comment">（如果原来就是黑色，则还是黑色）。</span></span><br><span class="line"><span class="comment">请问，经过 2020 分钟后，画布上有多少个格子是黑色的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解题思路：利用广度优先搜索思想</span></span><br><span class="line"><span class="comment">    1.先将初始的黑色点加入队列，初始化距离为0</span></span><br><span class="line"><span class="comment">    2.从队列中取出一个格子，检查它相邻的格子：</span></span><br><span class="line"><span class="comment">        a.如果相邻格子未超出画布范围，并且未被访问过(白色)，将其标记为黑色并加入队列</span></span><br><span class="line"><span class="comment">        b.更新格子距离+1</span></span><br><span class="line"><span class="comment">    3.不断重复直到队列为空或者达到指定时间</span></span><br><span class="line"><span class="comment">    4.统计黑格子数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 10001</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="comment">//表示画布上的点</span></span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[MAX_SIZE][MAX_SIZE];<span class="comment">//画布</span></span><br><span class="line"><span class="type">int</span> dist[MAX_SIZE][MAX_SIZE];<span class="comment">//到初始点距离</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dx[0] = -1 表示向左移动一个单位，</span></span><br><span class="line"><span class="comment">dx[1] = 0 表示在x轴上不移动，</span></span><br><span class="line"><span class="comment">dx[2] = 1 表示向右移动一个单位，</span></span><br><span class="line"><span class="comment">dx[3] = 0 表示在 x 轴上不移动。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">广度优先搜索(BFS)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bfs</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    memset函数用于将一段内存空间的内容设定为指定的值</span></span><br><span class="line"><span class="comment">    void *memset(void *ptr, int value, size_t num);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dist));<span class="comment">//将所有元素初始化为-1表示距离未知</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">q</span> =</span> <span class="built_in">malloc</span>(MAX_SIZE * MAX_SIZE * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));<span class="comment">//分配结构体数组q</span></span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(0, 0) (2020, 11) (11, 14) (2000, 2000)</span></span><br><span class="line">    q[rear++] = (<span class="keyword">struct</span> node)&#123;<span class="number">3000</span>, <span class="number">3000</span>&#125;; dist[<span class="number">3000</span>][<span class="number">3000</span>] = <span class="number">0</span>;<span class="comment">//将初始点(3000,3000)加入队列，并将其到初始点距离设定为0(初始点)</span></span><br><span class="line">    q[rear++] = (<span class="keyword">struct</span> node)&#123;<span class="number">5020</span>, <span class="number">3011</span>&#125;; dist[<span class="number">5020</span>][<span class="number">3011</span>] = <span class="number">0</span>;</span><br><span class="line">    q[rear++] = (<span class="keyword">struct</span> node)&#123;<span class="number">3011</span>, <span class="number">3014</span>&#125;; dist[<span class="number">3011</span>][<span class="number">3014</span>] = <span class="number">0</span>;</span><br><span class="line">    q[rear++] = (<span class="keyword">struct</span> node)&#123;<span class="number">5000</span>, <span class="number">5000</span>&#125;; dist[<span class="number">5000</span>][<span class="number">5000</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*队列：</span></span><br><span class="line"><span class="comment">    [0][1][2][3][4][5][6][7]</span></span><br><span class="line"><span class="comment">     ^                    ^</span></span><br><span class="line"><span class="comment">    front                rear   front &lt; rear :队列不为空</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">while</span> (front &lt; rear) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">t</span> =</span> q[front++];<span class="comment">//取出队首格子</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前处理格子距离初始点达到2020，释放队列内存空间</span></span><br><span class="line">        <span class="keyword">if</span> (dist[t.x][t.y] == <span class="number">2020</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> a = t.x + dx[i], b = t.y + dy[i];<span class="comment">//遍历当前格子的四个相邻格子</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= MAX_SIZE || b &lt; <span class="number">0</span> || b &gt;= MAX_SIZE) <span class="keyword">continue</span>;<span class="comment">//检查相邻格子是否已经超出画布</span></span><br><span class="line">            <span class="keyword">if</span> (g[a][b] == <span class="string">&#x27;*&#x27;</span> || dist[a][b] != <span class="number">-1</span>) <span class="keyword">continue</span>;<span class="comment">//检查格子是否已经黑了或者距离已经被计算过了</span></span><br><span class="line"></span><br><span class="line">            g[a][b] = <span class="string">&#x27;*&#x27;</span>;<span class="comment">//将格子变黑</span></span><br><span class="line">            q[rear++] = (<span class="keyword">struct</span> node)&#123;a, b&#125;;<span class="comment">//将相邻格子加入队尾</span></span><br><span class="line">            dist[a][b] = dist[t.x][t.y] + <span class="number">1</span>;<span class="comment">//计算相邻格子到初始格子距离</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将所有画布上的点变成白色</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAX_SIZE; j++) &#123;</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化黑点</span></span><br><span class="line">    g[<span class="number">3000</span>][<span class="number">3000</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    g[<span class="number">5020</span>][<span class="number">3011</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    g[<span class="number">3011</span>][<span class="number">3014</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    g[<span class="number">5000</span>][<span class="number">5000</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    bfs();<span class="comment">//调用函数扩散</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算黑点数量</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAX_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;*&#x27;</span>) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>查找</title>
    <url>/2024/04/08/%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h3 id="查找整数存不存在，存在返回位置，不存在返回-1"><a href="#查找整数存不存在，存在返回位置，不存在返回-1" class="headerlink" title="查找整数存不存在，存在返回位置，不存在返回-1"></a>查找整数存不存在，存在返回位置，不存在返回-1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[MAX];</span><br><span class="line">    <span class="type">int</span> n, a, ans;</span><br><span class="line">    ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == s[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ans = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//找到就停止</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>杨辉三角</title>
    <url>/2024/04/08/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">char</span> a[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//第一位是1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       a[<span class="number">0</span>][i] = a[i][i] = <span class="number">1</span>;<span class="comment">//首列和尾列都是1</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">       &#123;</span><br><span class="line">            a[i][j] = a[i<span class="number">-1</span>][j] + a[i<span class="number">-1</span>][j<span class="number">-1</span>];<span class="comment">//每个元素都是其上一列对应元素和前一个元素和</span></span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>回文数</title>
    <url>/2024/04/08/%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<h2 id="一-找回四位十进制内的回文数"><a href="#一-找回四位十进制内的回文数" class="headerlink" title="一.找回四位十进制内的回文数"></a>一.找回四位十进制内的回文数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1000</span>; i &lt; <span class="number">9999</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> a = i / <span class="number">1000</span>;</span><br><span class="line">       <span class="type">int</span> b = i / <span class="number">100</span> % <span class="number">10</span> ;</span><br><span class="line">       <span class="type">int</span> c = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">       <span class="type">int</span> d = i % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (a == d &amp;&amp; b == c)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二-找一个数转置相加后能否得到一个回文数（30步内）"><a href="#二-找一个数转置相加后能否得到一个回文数（30步内）" class="headerlink" title="二.找一个数转置相加后能否得到一个回文数（30步内）"></a>二.找一个数转置相加后能否得到一个回文数（30步内）</h2><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​    先输入一个字符串转成10进制数存入数组，转置相加，判断30步内是否能是回文数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</span></span><br><span class="line"><span class="comment">  若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。</span></span><br><span class="line"><span class="comment">　　例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。</span></span><br><span class="line"><span class="comment">　　又如：对于10进制数87：</span></span><br><span class="line"><span class="comment">　　STEP1：87+78 = 165 STEP2：165+561 = 726</span></span><br><span class="line"><span class="comment">　　STEP3：726+627 = 1353 STEP4：1353+3531 = 4884</span></span><br><span class="line"><span class="comment">　　在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　写一个程序，给定一个N（2&lt;=N&lt;=10或N=16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。</span></span><br><span class="line"><span class="comment">　　如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[<span class="number">1001</span>];</span><br><span class="line"><span class="type">int</span> num[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sTOnum</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> num[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i] = <span class="number">10</span> + s[i] - <span class="string">&#x27;A&#x27;</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            num[i] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">nADDm</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> n, <span class="type">int</span> m)</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> i, *mun, kc;<span class="comment">//定义指针mun来存储num[]的转置，kc是余数</span></span><br><span class="line">    mun = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mun[n-i<span class="number">-1</span>] = num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    kc =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i] = num[i] + mun[i] + kc;</span><br><span class="line">        kc = num[i] / m;</span><br><span class="line">        num[i] = num[i] % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (kc &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num[n++] = kc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(mun);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">reserve</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = n <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; num[i] == num[j])</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i &gt;= j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="type">int</span> i, n, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);<span class="comment">//输入字符串不带&amp;</span></span><br><span class="line">    n = sTOnum(s, num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        n = nADDm(num, n, p);</span><br><span class="line">        <span class="keyword">if</span> (reserve(num, n) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;STEP=%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">30</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;impossible\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>进制转换</title>
    <url>/2024/04/06/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="十六进制转八进制-包含十六转二"><a href="#十六进制转八进制-包含十六转二" class="headerlink" title="十六进制转八进制(包含十六转二)"></a>十六进制转八进制(包含十六转二)</h2><p><em>先转二进制再转八进制</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_size 100000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储二进制数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要先把十六进制转二进制，所以c0~c3,四位存储空间来存,c3 c2 c1 c0;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_b</span><span class="params">(<span class="type">char</span> *b, <span class="type">char</span> c3, <span class="type">char</span> c2, <span class="type">char</span> c1, <span class="type">char</span> c0, <span class="type">int</span> start)</span></span><br><span class="line">&#123;</span><br><span class="line">    b[start] = c3;</span><br><span class="line">    b[start + <span class="number">1</span>] = c2;</span><br><span class="line">    b[start + <span class="number">2</span>] = c1;</span><br><span class="line">    b[start + <span class="number">3</span>] = c0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//十六进制转二进制</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">h_to_b</span><span class="params">(<span class="type">char</span> *h, <span class="type">char</span> *b)</span>   </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> hl = <span class="built_in">strlen</span>(h);<span class="comment">//存储十六进制的数组长度</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; hl; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (h[i])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//每个十六进制字符需要占据数组b中四个位置。因此，通过4*i计算出了当前十六进制字符在数组b中的起始位置</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">            save_b(b, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>*i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>*hl ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制转八进制</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从末端开始遍历：</span></span><br><span class="line"><span class="comment">    更好的处理三位数，比如11010，从末端遍历就是11 010 --&gt;32，从首位便利的话就是110 10 --&gt; 52 出现逻辑错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">b_to_o</span><span class="params">(<span class="type">char</span> *b, <span class="type">char</span> *o, <span class="type">int</span> bl)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> ol;</span><br><span class="line">    <span class="keyword">if</span> (bl % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        ol = bl / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ol = bl / <span class="number">3</span> + <span class="number">1</span>;<span class="comment">//为了完全把二进制位数算进去，整数除法会丢掉小数部分，所以加一</span></span><br><span class="line">    j = bl - <span class="number">1</span>;<span class="comment">//从末端开始遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*由于二进制字符 &#x27;0&#x27; 的 ASCII 码值为 48，因此通过减去 48 就可以得到对应的数字值。*/</span></span><br><span class="line">    <span class="keyword">for</span> ( i = ol - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            o[i] = (b[j] - <span class="number">48</span>) + (b[j<span class="number">-1</span>] - <span class="number">48</span>) * <span class="number">2</span> + (b[j<span class="number">-2</span>] - <span class="number">48</span>) * <span class="number">4</span> + <span class="number">48</span>; <span class="comment">//再转成字符的形式存起来</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (j)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                o[i] = b[j] - <span class="number">48</span> + (b[j<span class="number">-1</span>] - <span class="number">48</span>) * <span class="number">2</span> + (b[j<span class="number">-2</span>] - <span class="number">48</span>) * <span class="number">4</span> + <span class="number">48</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                o[i] = b[j] - <span class="number">48</span> + (b[j<span class="number">-1</span>] - <span class="number">48</span>) * <span class="number">2</span> + <span class="number">48</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                o[i] = b[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j = j - <span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ol;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_o</span><span class="params">(<span class="type">char</span> *o, <span class="type">int</span> ol)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)<span class="comment">//去除首位0</span></span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; ol; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, o[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> h[max_size];</span><br><span class="line">    <span class="type">char</span> b[<span class="number">4</span> * max_size];</span><br><span class="line">    <span class="type">char</span> o[<span class="number">4</span> * max_size / <span class="number">3</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> n, i, bl, ol;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    getchar();<span class="comment">//清除换行符，使用scanf函数读取整数n之后，输入缓冲区中可能会残留一个换行符（用户回车键产生）</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        gets(h);</span><br><span class="line">        bl = h_to_b(h, b);</span><br><span class="line">        ol = b_to_o(b, o, bl);</span><br><span class="line"></span><br><span class="line">        print_o(o, ol);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>, x;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">8</span>];<span class="comment">//不超过8位的正的十六进制数字符串</span></span><br><span class="line">    <span class="type">int</span> len, i = <span class="number">0</span>;</span><br><span class="line">    gets(a);</span><br><span class="line">    len = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.&#x27;0&#x27;的ASCII是48，&#x27;A&#x27;的ASCII是65，&#x27;7&#x27;ASCII是55,</span></span><br><span class="line"><span class="comment">    所以当a[len-1]对应&quot;A~F&quot;时，a[len-1] - &#x27;7&#x27;对应</span></span><br><span class="line"><span class="comment">    10~15。</span></span><br><span class="line"><span class="comment">    2.i对应16进制的权重，从左向右递增所以i++,先i后加1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span> (len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[len<span class="number">-1</span>] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[len<span class="number">-1</span>] &lt;= <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x = (a[len<span class="number">-1</span>] - <span class="string">&#x27;7&#x27;</span>) * <span class="built_in">pow</span>(<span class="number">16</span>, i++);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            x = (a[len<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="built_in">pow</span>(<span class="number">16</span>, i++);</span><br><span class="line">        &#125;</span><br><span class="line">        sum += x;</span><br><span class="line">        len--;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0lf&quot;</span>, sum);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构建十六进制数组</span></span><br><span class="line"><span class="type">char</span> data[] = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//十进制转十六进制</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">模16的余数对应data[余数]的字符串顺序存储在数组num[n]中</span></span><br><span class="line"><span class="comment">返回数组下标n</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Transform</span><span class="params">(<span class="type">char</span> *num, <span class="type">long</span> <span class="type">long</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (value &gt;= <span class="number">16</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num[n++] = data[value % <span class="number">16</span>];</span><br><span class="line">        value /= <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num[n++] = data[value % <span class="number">16</span>];</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆序打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">char</span> *num, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span> ( i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> value;</span><br><span class="line">    <span class="type">char</span> num[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;value);</span><br><span class="line">    n = Transform(num, value);</span><br><span class="line">    Print(num, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA算法实现</title>
    <url>/2024/04/01/RSA%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 信安</span></span><br><span class="line"><span class="comment"># 土辛台</span></span><br><span class="line"><span class="comment"># 开发时间  23:01</span></span><br><span class="line"><span class="comment">#实现RSA算法分7步</span></span><br><span class="line"><span class="comment">#1. 选择一对不相等的素数p,q: 用到素数检验（费马小定理）</span></span><br><span class="line"><span class="comment">#2，令n = p * q</span></span><br><span class="line"><span class="comment">#3. 计算n的欧拉函数phi_n = (p - 1) * (q - 1)</span></span><br><span class="line"><span class="comment">#4，选一个和n互素的整数 e = 3</span></span><br><span class="line"><span class="comment">#5. 计算e模phi_n的逆元d: 用到扩展欧几里得算法</span></span><br><span class="line"><span class="comment">#6. 公钥KU = (e, n)</span></span><br><span class="line"><span class="comment">#7. 私钥KR = (d, p, q)</span></span><br><span class="line"><span class="comment">#明文M --&gt;加密： M^e mod n = C： 模乘</span></span><br><span class="line"><span class="comment">#密文C --&gt;解密： C^d mod n = M： 模乘</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span>  random</span><br><span class="line"><span class="comment">#模乘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">base, exponent, modulus</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    base = base % modulus<span class="comment">#对底数取模，防止溢出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> exponent &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exponent % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            result = (result * base) % modulus</span><br><span class="line">        exponent = exponent // <span class="number">2</span></span><br><span class="line">        base = (base * base) % modulus</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment">#a = power(4, 2, 5)</span></span><br><span class="line"><span class="comment">#print(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#费马测试</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_test</span>(<span class="params">a, N</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    费马小定理：</span></span><br><span class="line"><span class="string">        如果N是素数，则a^(N-1) - 1 能被 N 整除</span></span><br><span class="line"><span class="string">        a^(N-1) mod N = 1;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> N == <span class="number">2</span>:<span class="comment">#2是素数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> N % <span class="number">2</span> == <span class="number">0</span>:<span class="comment">#能被2整除的不是素数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> power(a, N - <span class="number">1</span>, N) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#b = fermat_test(7, 13)</span></span><br><span class="line"><span class="comment">#print(b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#素性测试</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">N, rounds = <span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">if</span> N &lt;= <span class="number">1</span>:<span class="comment">#小于等于1的不是素数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> N &lt;= <span class="number">3</span>:<span class="comment">#2，3是素数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        <span class="comment">#随机生成2到N-1的数去测试</span></span><br><span class="line">        a = random.randint(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        random.randint(a,b)是python标准库中&#x27;random&#x27;模块提供的函数</span></span><br><span class="line"><span class="string">        用于随机生成(a,b)之间的整数</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fermat_test(a, N):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a = is_prime(139)</span></span><br><span class="line"><span class="comment">#print(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机生成素数p</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_prime</span>(<span class="params">low, high</span>):</span><br><span class="line">    p = random.randint(low, high)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">        p = random.randint(low, high)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="comment">#欧几里得返回向量（d, x, y)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_gcd</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    利用递归实现欧几里得算法：</span></span><br><span class="line"><span class="string">        a &gt; b: a = b*q + r, 如果 r=0 ,b就是最大公约数d,否则将b赋值给a，r赋值给b，返回上一步。———&gt;算出最大公约数d</span></span><br><span class="line"><span class="string">    用扩展欧几里得算法算出系数x,y:</span></span><br><span class="line"><span class="string">        a&gt;b: b=0时，d=a, x=1, y=0</span></span><br><span class="line"><span class="string">        a = (a/b)*b + a%b:</span></span><br><span class="line"><span class="string">        gcd(a,b) = x*a + y*b  -&gt;1</span></span><br><span class="line"><span class="string">        gcd(b,a%b) = x&#x27;*b + y&#x27;*(a%b) -&gt;2</span></span><br><span class="line"><span class="string">        结合1,2--&gt; x*a + y*b = x&#x27;*b + y&#x27;* a%b 又a%b= a-(a/b)*b</span></span><br><span class="line"><span class="string">        --&gt;x*a + y*b = x&#x27;*b + y&#x27;*[a-(a/b)*b] = y&#x27;*a + x&#x27;-y&#x27;(a/b)*b</span></span><br><span class="line"><span class="string">        --&gt; x = y&#x27;, y = x&#x27;-y&#x27;(a/b)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d, x, y = ext_gcd(b, a % b)</span><br><span class="line">        <span class="keyword">return</span> d, y, x - (a // b)*y</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算模逆</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_mod</span>(<span class="params">a, m</span>):</span><br><span class="line">    d, x, y = ext_gcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> d != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Inverse does not exist&quot;</span>)<span class="comment">#抛出异常</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (x % m + m) % m<span class="comment">#确保模逆在[0,b)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成密钥</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_keygen</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="comment">#随机生成位于(2^(k-1), 2^k) 的数p,q</span></span><br><span class="line">    p = random_prime(<span class="number">2</span>**(k-<span class="number">1</span>), <span class="number">2</span>**k)</span><br><span class="line">    q = random_prime(<span class="number">2</span>**(k-<span class="number">1</span>), <span class="number">2</span>**k)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#避免p = q</span></span><br><span class="line">    <span class="keyword">while</span> p == q:</span><br><span class="line">        q = random_prime(<span class="number">2</span>**(k - <span class="number">1</span>), <span class="number">2</span>**k)</span><br><span class="line">    <span class="comment">#大整数N：</span></span><br><span class="line">    N = p*q</span><br><span class="line">    <span class="comment">#求欧拉函数：</span></span><br><span class="line">    phi_N = (p -<span class="number">1</span>) * (q -<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#定义e = 3</span></span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#确保模逆的存在</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = inv_mod(e, phi_N)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> rsa_keygen(k)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成公钥私钥：</span></span><br><span class="line">    pubkey = (e, N)</span><br><span class="line">    prikey = (d, p, q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( pubkey, prikey)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m_text, pubkey</span>):</span><br><span class="line"></span><br><span class="line">    e = pubkey[<span class="number">0</span>]</span><br><span class="line">    N = pubkey[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m_text, <span class="built_in">str</span>):</span><br><span class="line">        <span class="comment">#ord 接受一个字符作为参数，返回一个ASCII码</span></span><br><span class="line">        Unicode_m_text = [<span class="built_in">ord</span>(char) <span class="keyword">for</span> char <span class="keyword">in</span> m_text]</span><br><span class="line">        ciphertext = [power(char, e, N) <span class="keyword">for</span> char <span class="keyword">in</span> Unicode_m_text]</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m_text, <span class="built_in">int</span>):</span><br><span class="line">        ciphertext = power(m_text, e, N)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Encryption of non-str, int data types is not currently supported.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="comment">#解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">e_text, prikey</span>):</span><br><span class="line"></span><br><span class="line">    d, p, q = prikey</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e_text, <span class="built_in">list</span>):</span><br><span class="line">        decrypted_str = [power(char, d, p * q) <span class="keyword">for</span> char <span class="keyword">in</span> e_text]</span><br><span class="line">        <span class="comment">#chr接受一个ASCII码作为参数，返回对应的字符</span></span><br><span class="line">        decrypt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(code) <span class="keyword">for</span> code <span class="keyword">in</span> decrypted_str])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        decrypt = power(e_text, d, p * q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pubkey, prikey = rsa_keygen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;公钥：&quot;</span>, pubkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;私钥：&quot;</span>, prikey)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对314加密和解密</span></span><br><span class="line">    message = <span class="number">314</span></span><br><span class="line">    encrypted = enc(message, pubkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;314加密后的信息为：&quot;</span>, encrypted)</span><br><span class="line">    decrypted = dec(encrypted, prikey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的信息是：&quot;</span>, decrypted)</span><br><span class="line"></span><br><span class="line">    message = <span class="string">&quot;芙蓉王源&quot;</span></span><br><span class="line">    encrypted = enc(message, pubkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;芙蓉王源加密后的信息为：&quot;</span>, encrypted)</span><br><span class="line">    decrypted = dec(encrypted, prikey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的信息是：&quot;</span>, decrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法概论作业</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络的概念</title>
    <url>/2024/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h1><p>​        <strong><em>计算机网络是一个将众多分散的，自治的的计算机系统，通过通讯设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统</em></strong></p>
<p><img src="https://raw.githubusercontent.com/tuxintai/tuxintai-PicGoImgs/main/D%3A%5CPicGo%5Cimge/202403311434438.png" style="zoom:20%;" /></p>
<h2 id="计算机网络-由若干个节点和连接这些节点的链路组成"><a href="#计算机网络-由若干个节点和连接这些节点的链路组成" class="headerlink" title="计算机网络:由若干个节点和连接这些节点的链路组成"></a>计算机网络:由若干个节点和连接这些节点的链路组成</h2><h2 id="1-组成："><a href="#1-组成：" class="headerlink" title="1.组成："></a>1.组成：</h2><h3 id="1-1-从组成部分来看："><a href="#1-1-从组成部分来看：" class="headerlink" title="1.1 从组成部分来看："></a>1.1 从组成部分来看：</h3><h5 id="1-硬件："><a href="#1-硬件：" class="headerlink" title="1 硬件："></a>1 硬件：</h5><h6 id="1-主机：端系统如电脑，手机，物联网设备…"><a href="#1-主机：端系统如电脑，手机，物联网设备…" class="headerlink" title="1 主机：端系统如电脑，手机，物联网设备…"></a>1 主机：端系统如电脑，手机，物联网设备…</h6><h6 id="2-通讯设备：集线器，交换机，路由器…"><a href="#2-通讯设备：集线器，交换机，路由器…" class="headerlink" title="2 通讯设备：集线器，交换机，路由器…"></a>2 通讯设备：集线器，交换机，路由器…</h6><p>​                                1.集线器和交换机，集线器可以连接多个设备构成一个计算机网络，但是不能避免信息传递的冲突，交换机可以，用于连接同一网络内不同节点。</p>
<p>​                                2.路由器是用来连接不同的网络。（家用路由器=路由器+交换机+其他功能）</p>
<h6 id="3-通讯链路：网线，光纤，同轴电缆-…"><a href="#3-通讯链路：网线，光纤，同轴电缆-…" class="headerlink" title="3 通讯链路：网线，光纤，同轴电缆 …"></a>3 通讯链路：网线，光纤，同轴电缆 …</h6><h5 id="2-软件：Email客户端，聊天软件，网盘软件等方便用户使用，实现资源共享"><a href="#2-软件：Email客户端，聊天软件，网盘软件等方便用户使用，实现资源共享" class="headerlink" title="2 软件：Email客户端，聊天软件，网盘软件等方便用户使用，实现资源共享"></a>2 软件：Email客户端，聊天软件，网盘软件等方便用户使用，实现资源共享</h5><h5 id="3-协议：规定计算机网络中的通信规则，有软件和硬件共同实现，如：网络适配器-软件-实现网络通信协议"><a href="#3-协议：规定计算机网络中的通信规则，有软件和硬件共同实现，如：网络适配器-软件-实现网络通信协议" class="headerlink" title="3 协议：规定计算机网络中的通信规则，有软件和硬件共同实现，如：网络适配器+软件 实现网络通信协议"></a>3 协议：规定计算机网络中的通信规则，有软件和硬件共同实现，如：网络适配器+软件 实现网络通信协议</h5><h6 id="1-网络适配器（网卡）：通常集成在计算机主板上，是固件加软件，作用：将主机数据发到网络上接受来自网络的数据"><a href="#1-网络适配器（网卡）：通常集成在计算机主板上，是固件加软件，作用：将主机数据发到网络上接受来自网络的数据" class="headerlink" title="1.网络适配器（网卡）：通常集成在计算机主板上，是固件加软件，作用：将主机数据发到网络上接受来自网络的数据"></a>1.网络适配器（网卡）：通常集成在计算机主板上，是固件加软件，作用：将主机数据发到网络上接受来自网络的数据</h6><h3 id="1-2-从工作方式来看："><a href="#1-2-从工作方式来看：" class="headerlink" title="1.2 从工作方式来看："></a>1.2 从工作方式来看：</h3><p><img src="https://raw.githubusercontent.com/tuxintai/tuxintai-PicGoImgs/main/D%3A%5CPicGo%5Cimge/202403311434899.png" style="zoom:10%;" /></p>
<h4 id="1-边缘部分："><a href="#1-边缘部分：" class="headerlink" title="1 边缘部分："></a>1 边缘部分：</h4><h6 id="1-1-工作方式：直接为用户服务（通信，资源共享）"><a href="#1-1-工作方式：直接为用户服务（通信，资源共享）" class="headerlink" title="1.1 工作方式：直接为用户服务（通信，资源共享）"></a>1.1 工作方式：直接为用户服务（通信，资源共享）</h6><h6 id="1-2-组成：主要由连接到互联网上的主机及其软件组成"><a href="#1-2-组成：主要由连接到互联网上的主机及其软件组成" class="headerlink" title="1.2 组成：主要由连接到互联网上的主机及其软件组成"></a>1.2 组成：主要由连接到互联网上的主机及其软件组成</h6><h4 id="2-核心部分："><a href="#2-核心部分：" class="headerlink" title="2 核心部分："></a>2 核心部分：</h4><h6 id="1-1-工作方式：为边缘部分提供服务（连通性，交换服务）"><a href="#1-1-工作方式：为边缘部分提供服务（连通性，交换服务）" class="headerlink" title="1.1 工作方式：为边缘部分提供服务（连通性，交换服务）"></a>1.1 工作方式：为边缘部分提供服务（连通性，交换服务）</h6><h6 id="交换服务：动态分配数据包传输路线"><a href="#交换服务：动态分配数据包传输路线" class="headerlink" title="交换服务：动态分配数据包传输路线"></a>交换服务：动态分配数据包传输路线</h6><h6 id="1-2-组成：-由大量网络和连接这些网络的路由器组成"><a href="#1-2-组成：-由大量网络和连接这些网络的路由器组成" class="headerlink" title="1.2 组成： 由大量网络和连接这些网络的路由器组成"></a>1.2 组成： 由大量网络和连接这些网络的路由器组成</h6><h3 id="1-3-从逻辑功能来看："><a href="#1-3-从逻辑功能来看：" class="headerlink" title="1.3 从逻辑功能来看："></a>1.3 从逻辑功能来看：</h3><h4 id="1-资源子网："><a href="#1-资源子网：" class="headerlink" title="1 资源子网："></a>1 资源子网：</h4><h6 id="1-1-计算机网络中运行应用程序，向用户提供可共享的硬件，软件和信息资源的部分"><a href="#1-1-计算机网络中运行应用程序，向用户提供可共享的硬件，软件和信息资源的部分" class="headerlink" title="1.1 计算机网络中运行应用程序，向用户提供可共享的硬件，软件和信息资源的部分"></a>1.1 计算机网络中运行应用程序，向用户提供可共享的硬件，软件和信息资源的部分</h6><h6 id="1-2-主要由连接到互联网上的主机组成"><a href="#1-2-主要由连接到互联网上的主机组成" class="headerlink" title="1.2 主要由连接到互联网上的主机组成"></a>1.2 主要由连接到互联网上的主机组成</h6><h4 id="2-通信子网："><a href="#2-通信子网：" class="headerlink" title="2 通信子网："></a>2 通信子网：</h4><h5 id="1-1-计算机网络中负责计算机间信息传输的部分，把计算机和其他用户装置互联在一起的所有通信设备和介质的总称"><a href="#1-1-计算机网络中负责计算机间信息传输的部分，把计算机和其他用户装置互联在一起的所有通信设备和介质的总称" class="headerlink" title="1.1 计算机网络中负责计算机间信息传输的部分，把计算机和其他用户装置互联在一起的所有通信设备和介质的总称"></a>1.1 计算机网络中负责计算机间信息传输的部分，把计算机和其他用户装置互联在一起的所有通信设备和介质的总称</h5><h5 id="1-2-主要由-通信链路-通信设备-协议-构成"><a href="#1-2-主要由-通信链路-通信设备-协议-构成" class="headerlink" title="1.2 主要由 通信链路+通信设备+协议 构成"></a>1.2 主要由 通信链路+通信设备+协议 构成</h5><p>​                                <em>主机内部实现信息传输的网络适配器，底层协议属于通信子网的范畴</em></p>
<h2 id="2-功能："><a href="#2-功能：" class="headerlink" title="2.功能："></a>2.功能：</h2><h3 id="2-1-数据通信：实现计算机之间数据传输，是最基本，最重要的功能"><a href="#2-1-数据通信：实现计算机之间数据传输，是最基本，最重要的功能" class="headerlink" title="2.1 数据通信：实现计算机之间数据传输，是最基本，最重要的功能"></a>2.1 数据通信：实现计算机之间数据传输，是最基本，最重要的功能</h3><h3 id="2-2-资源共享："><a href="#2-2-资源共享：" class="headerlink" title="2.2 资源共享："></a>2.2 资源共享：</h3><h5 id="1-硬件：智能音箱请求服务器处理"><a href="#1-硬件：智能音箱请求服务器处理" class="headerlink" title="1.硬件：智能音箱请求服务器处理"></a>1.硬件：智能音箱请求服务器处理</h5><h5 id="2-软件：应用商店"><a href="#2-软件：应用商店" class="headerlink" title="2.软件：应用商店"></a>2.软件：应用商店</h5><h5 id="3-数据资源：分享视频"><a href="#3-数据资源：分享视频" class="headerlink" title="3.数据资源：分享视频"></a>3.数据资源：分享视频</h5><h3 id="2-3-分布式处理：将某个复杂任务分配给网络中多台计算机处理-如：大矩阵运算"><a href="#2-3-分布式处理：将某个复杂任务分配给网络中多台计算机处理-如：大矩阵运算" class="headerlink" title="2.3 分布式处理：将某个复杂任务分配给网络中多台计算机处理,如：大矩阵运算"></a>2.3 分布式处理：将某个复杂任务分配给网络中多台计算机处理,如：大矩阵运算</h3><h3 id="2-4-提高可靠性：网络中各台计算机互为替代机，如：网盘服务器集群网络，数据冗余备份"><a href="#2-4-提高可靠性：网络中各台计算机互为替代机，如：网盘服务器集群网络，数据冗余备份" class="headerlink" title="2.4 提高可靠性：网络中各台计算机互为替代机，如：网盘服务器集群网络，数据冗余备份"></a>2.4 提高可靠性：网络中各台计算机互为替代机，如：网盘服务器集群网络，数据冗余备份</h3><h3 id="2-5-负载均衡：网络中各台计算机共同分担繁重工作，如：游戏多台服务器均衡处理玩家请求"><a href="#2-5-负载均衡：网络中各台计算机共同分担繁重工作，如：游戏多台服务器均衡处理玩家请求" class="headerlink" title="2.5 负载均衡：网络中各台计算机共同分担繁重工作，如：游戏多台服务器均衡处理玩家请求"></a>2.5 负载均衡：网络中各台计算机共同分担繁重工作，如：游戏多台服务器均衡处理玩家请求</h3><h3 id="2-6-其他：满足社会需求，生活需求，如：远程办公，远程教育，娱乐……"><a href="#2-6-其他：满足社会需求，生活需求，如：远程办公，远程教育，娱乐……" class="headerlink" title="2.6 其他：满足社会需求，生活需求，如：远程办公，远程教育，娱乐……"></a>2.6 其他：满足社会需求，生活需求，如：远程办公，远程教育，娱乐……</h3>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>四大件</tag>
      </tags>
  </entry>
  <entry>
    <title>序列求和</title>
    <url>/2024/03/25/%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.问题：求1+2+……+n的值</span></span><br><span class="line"><span class="comment">2.数据规模：</span></span><br><span class="line"><span class="comment">    1 &lt;= n &lt;= 1000000000</span></span><br><span class="line"><span class="comment">3.注意：答案可能不在int的范围内，使用%I64d来输出long long 类型整数</span></span><br><span class="line"><span class="comment">4.求和公式：</span></span><br><span class="line"><span class="comment">    Sn = n(n+1) / 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">//ret 可存储结果，tmp为临时变量</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span>, tmp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    tmp = n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, (<span class="number">1</span>+tmp) * tmp / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：答案可能不在int的范围内，使用%I64d来输出long long 类型整数</p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>圆的面积</title>
    <url>/2024/03/25/%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.问题描述：给定半径r,求圆的面积</span></span><br><span class="line"><span class="comment">2.输入整数r</span></span><br><span class="line"><span class="comment">3.输出：输出一个实数，保留小数点后7位</span></span><br><span class="line"><span class="comment">4.样式：</span></span><br><span class="line"><span class="comment">    输入：4</span></span><br><span class="line"><span class="comment">    输出：50.2654825</span></span><br><span class="line"><span class="comment">5.数据规模：1 &lt;= r &lt;= 10000</span></span><br><span class="line"><span class="comment">6.使用数学公式求Π： PI = atan(1.0)*4 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="type">double</span> s, PI;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r);</span><br><span class="line">    PI = <span class="built_in">atan</span>(<span class="number">1.0</span>)*<span class="number">4</span>;</span><br><span class="line">    s = PI * r * r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.7lf\n&quot;</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：注意保留小数点的打印格式，利用数学公式Π：PI=atan(1.0)*4</p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Fibonacci</title>
    <url>/2024/03/25/Fibonacci/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.Fibonacci数列：</span></span><br><span class="line"><span class="comment">    F(n) = F(n-1) + F(n-2)</span></span><br><span class="line"><span class="comment">    F(1) = 1, F(2) = 1</span></span><br><span class="line"><span class="comment">2.题目：</span></span><br><span class="line"><span class="comment">    求F(n) / 10007 的余数</span></span><br><span class="line"><span class="comment">3.数据规模与约定:</span></span><br><span class="line"><span class="comment">    1 &lt;= n &lt;= 1,000,000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 10007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_num 1000001</span></span><br><span class="line"><span class="type">int</span> n, i, F[max_num];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">     F[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">     F[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">for</span>(i = <span class="number">3</span>; i &lt;= n; ++i)</span><br><span class="line">     &#123;</span><br><span class="line">        F[i] = (F[i<span class="number">-1</span>] + F[i<span class="number">-2</span>]) % mod;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, F[n]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：因为题目要求F(n)%10007,不需要求F(n),所以直接求余数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">F[i] = (F[i<span class="number">-1</span>] + F[i<span class="number">-2</span>]) % mod；	</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法</title>
    <url>/2024/03/25/%E4%BA%8C%E5%88%86%E6%B3%95/</url>
    <content><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> num_size, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = num_size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = left + (right - left)/<span class="number">2</span> ;</span><br><span class="line">        <span class="keyword">if</span> (target == nums[middle])&#123;</span><br><span class="line">             <span class="keyword">return</span> middle;;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[middle])&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>1.边界的判断:[left, right]:</p>
<p>​    //不用再判断middle    </p>
<p>​    right = middle - 1 ;  left = middle + 1 </p>
<p>2.返回的是数组 nums[] 的索引，和target比较的是数组里面的值也就是nums[middle]</p>
<p>3.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> middle = left + (right - left)/<span class="number">2</span> <span class="comment">//防止溢出</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>每日算法</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>num_to_roman</title>
    <url>/2024/03/18/num-to-roman/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 罗马数字规则：</span></span><br><span class="line"><span class="comment">I（1），V（5)，x(10), L(50), C(100), D(500), M(1000)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">num_to_roman</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = num / <span class="number">1000</span>；</span><br><span class="line">    <span class="type">int</span> b = num % <span class="number">1000</span> / <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> c = num % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> d = num %;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> s[<span class="number">20</span>];<span class="comment">//静态数组，存结果</span></span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//确保数组为空</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span> &amp;&amp; num &lt; <span class="number">4000</span>) &#123;</span><br><span class="line">        <span class="comment">// 千位</span></span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;M&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">2</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;MM&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">3</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;MMM&quot;</span>);</span><br><span class="line">        <span class="comment">// 百位</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">1</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">2</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">3</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;CCC&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">4</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;CD&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">5</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">6</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;DC&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">7</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;DCC&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">8</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;DCCC&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">9</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;CM&quot;</span>);</span><br><span class="line">        <span class="comment">// 十位</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">1</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;X&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">2</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;XX&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">3</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">4</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;XL&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">5</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;L&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">6</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;LX&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">7</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;LXX&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">8</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;LXXX&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">9</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;XC&quot;</span>);</span><br><span class="line">        <span class="comment">// 个位</span></span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">1</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;I&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">2</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;II&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">3</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;III&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">4</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;IV&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">5</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;V&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">6</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;VI&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">7</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;VII&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">8</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;VIII&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">9</span>) <span class="built_in">strcat</span>(s, <span class="string">&quot;IX&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter an integer ranging from 0 to 4000\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, NumTORoman(num));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>每日算法</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
</search>
